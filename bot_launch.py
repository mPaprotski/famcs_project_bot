from telebot import TeleBot, types
from config import BOT_TOKEN, ADMINS, SELLERS
from data_func import get_inventory_summary
from clients_func import show_clients_for_seller, update_order_status, format_order
from sheets import get_sheet

bot = TeleBot(BOT_TOKEN)

def register_handlers():
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ callback-–æ–≤ –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞.
    """
    
    @bot.message_handler(commands=['start'])
    def start(message):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
        """
        username = f"@{message.from_user.username}"
        if username not in SELLERS and username not in ADMINS:
            bot.send_message(message.chat.id, "–ú–µ—Ä—á —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç. –ñ–¥–∏—Ç–µ ü•∞", parse_mode="HTML")
            return
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤", callback_data='data'))
        markup.add(types.InlineKeyboardButton("–°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤", callback_data='clients'))
        markup.add(types.InlineKeyboardButton("–°–ø–∏—Å–æ–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤", callback_data='paid_clients'))
        markup.add(types.InlineKeyboardButton("–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤", callback_data='delivered_clients'))
        markup.add(types.InlineKeyboardButton("–í–æ–ø—Ä–æ—Å –ø–æ –º–µ—Ä—á—É", url='http://t.me/paprotsky'))
        bot.send_message(message.chat.id, "–ß—Ç–æ –≤—ã–ø–æ–ª–Ω—è–µ–º?", reply_markup=markup)

    @bot.callback_query_handler(func=lambda call: call.data == 'data')
    def handle_data(call):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤". –î–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.
        """
        username = f"@{call.from_user.username}"
        if username in ADMINS:
            summary = get_inventory_summary()
            bot.send_message(call.message.chat.id, summary, parse_mode="HTML")
        else:
            bot.send_message(call.message.chat.id, "–¢—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä)))")
        
    @bot.callback_query_handler(func=lambda call: call.data == 'clients')
    def handle_clients(call):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤". –ò–º–µ–µ—Ç —Ä–∞–∑–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ –∏ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤.
        """
        username = f"@{call.from_user.username}"
        if username in ADMINS:
            markup = types.InlineKeyboardMarkup()
            bot.send_message(call.message.chat.id, "–ö–∞–∫–æ–π –ø—Ä–æ–¥–∞–≤–µ—Ü –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?")
            for seller in SELLERS:
                markup.add(types.InlineKeyboardButton(seller, callback_data=f"seller_{seller}"))
            bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥–∞–≤—Ü–∞:", reply_markup=markup)
        elif username in SELLERS:
            show_clients_for_seller(bot, call.message.chat.id, username, status_filter=None)
        else:
            bot.send_message(call.message.chat.id, "–í –¥–æ—Å—Ç—É–ø–µ –æ—Ç–∫–∞–∑–∞–Ω–æ")

    @bot.callback_query_handler(func=lambda call: call.data == 'paid_clients')
    def handle_paid_clients(call):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–ø–∏—Å–æ–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤". –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –æ–ø–ª–∞—á–µ–Ω–Ω—ã–º–∏ –∑–∞–∫–∞–∑–∞–º–∏.
        """
        username = f"@{call.from_user.username}"
        if username in ADMINS:
            markup = types.InlineKeyboardMarkup()
            bot.send_message(call.message.chat.id, "–ö–∞–∫–æ–π –ø—Ä–æ–¥–∞–≤–µ—Ü –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?")
            for seller in SELLERS:
                markup.add(types.InlineKeyboardButton(seller, callback_data=f"seller_paid_{seller}"))
            bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥–∞–≤—Ü–∞:", reply_markup=markup)
        elif username in SELLERS:
            show_clients_for_seller(bot, call.message.chat.id, username, status_filter="–û–ø–ª–∞—á–µ–Ω–æ")
        else:
            bot.send_message(call.message.chat.id, "–í –¥–æ—Å—Ç—É–ø–µ –æ—Ç–∫–∞–∑–∞–Ω–æ")

    @bot.callback_query_handler(func=lambda call: call.data == 'delivered_clients')
    def handle_delivered_clients(call):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤". –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –∑–∞–∫–∞–∑–∞–º–∏.
        """
        username = f"@{call.from_user.username}"
        if username in ADMINS:
            markup = types.InlineKeyboardMarkup()
            bot.send_message(call.message.chat.id, "–ö–∞–∫–æ–π –ø—Ä–æ–¥–∞–≤–µ—Ü –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?")
            for seller in SELLERS:
                markup.add(types.InlineKeyboardButton(seller, callback_data=f"seller_delivered_{seller}"))
            bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥–∞–≤—Ü–∞:", reply_markup=markup)
        elif username in SELLERS:
            show_clients_for_seller(bot, call.message.chat.id, username, status_filter="–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ")
        else:
            bot.send_message(call.message.chat.id, "–í –¥–æ—Å—Ç—É–ø–µ –æ—Ç–∫–∞–∑–∞–Ω–æ")

    @bot.callback_query_handler(func=lambda call: call.data.startswith("seller_"))
    def handle_seller_selection(call):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–¥–∞–≤—Ü–∞ –∏–∑ —Å–ø–∏—Å–∫–∞.
        """
        if call.data.startswith("seller_paid_"):
            seller = call.data.split("seller_paid_", 1)[1]
            show_clients_for_seller(bot, call.message.chat.id, seller, status_filter="–û–ø–ª–∞—á–µ–Ω–æ")
        elif call.data.startswith("seller_delivered_"):
            seller = call.data.split("seller_delivered_", 1)[1]
            show_clients_for_seller(bot, call.message.chat.id, seller, status_filter="–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ")
        else:
            seller = call.data.split("seller_", 1)[1]
            show_clients_for_seller(bot, call.message.chat.id, seller, status_filter=None)

    @bot.callback_query_handler(func=lambda call: call.data.startswith("paid_") or call.data.startswith("delivered_") or call.data.startswith("reset_"))
    def handle_status_change(call):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞.
        """
        username = f"@{call.from_user.username}"
        if username not in SELLERS and username not in ADMINS:
            bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞")
            return

        try:
            action, row_index = call.data.split("_", 1)
            row_index = int(row_index)
            if action == "paid":
                new_status = "–û–ø–ª–∞—á–µ–Ω–æ"
            elif action == "delivered":
                new_status = "–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ"
            else:
                new_status = ""  # –°–±—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞

            if not call.message:
                bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
                return

            update_order_status(row_index, new_status)
            
            sheet = get_sheet()
            rows = sheet.get_all_records()
            if row_index - 2 >= len(rows) or row_index < 2:
                bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: —Å—Ç—Ä–æ–∫–∞ –∑–∞–∫–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return
            
            row = rows[row_index - 2]
            items, total_price = format_order(row)
            if not items:
                bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –∑–∞–∫–∞–∑ –ø—É—Å—Ç–æ–π")
                return

            text = (
                f"üë§ <b>–§–ò–û:</b> {row['–§–ò–û']}\n"
                f"üìû <u>–¢–µ–ª–µ–≥—Ä–∞–º:</u> {row['–¢–ì (@example)']}\n"
                f"üì± <u>–¢–µ–ª–µ—Ñ–æ–Ω:</u> {row['–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞']}\n"
                f"üõç <u><b>–ó–∞–∫–∞–∑:</b></u>\n"
                f"<pre>{'\n'.join(items)}</pre>\n"
                f"üí∞<u><i>–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞:</i></u> {total_price} —Ä—É–±.\n"
                f"<b>–°—Ç–∞—Ç—É—Å:</b> {new_status or '–ù–µ —É–∫–∞–∑–∞–Ω'}"
            )
            
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("‚úÖ –û–ø–ª–∞—á–µ–Ω–æ", callback_data=f"paid_{row_index}"))
            markup.add(types.InlineKeyboardButton("üì¶ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ", callback_data=f"delivered_{row_index}"))
            markup.add(types.InlineKeyboardButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data=f"reset_{row_index}"))
            
            bot.edit_message_text(
                text=text,
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                parse_mode='HTML',
                reply_markup=markup
            )
            status_message = "–°—Ç–∞—Ç—É—Å —Å–±—Ä–æ—à–µ–Ω" if action == "reset" else f"–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {new_status}"
            bot.answer_callback_query(call.id, status_message)
        except ValueError as ve:
            bot.answer_callback_query(call.id, f"–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö: {str(ve)}")
        except Exception as e:
            bot.answer_callback_query(call.id, f"–û—à–∏–±–∫–∞: {str(e)}")

register_handlers()